---
title: testing-valhalla
author: ''
format: gfm
---

date: '2023-12-06'
slug: testing-valhalla
categories: []
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2023-12-06T22:51:49Z'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---

```{r}
library(sf)
```


``` bash
# download a file to custom_files and start valhalla
mkdir custom_files
wget -O custom_files/andorra-latest.osm.pbf https://download.geofabrik.de/europe/andorra-latest.osm.pbf
docker run -dt --name valhalla_gis-ops -p 8002:8002 -v $PWD/custom_files:/custom_files ghcr.io/gis-ops/docker-valhalla/valhalla:latest
# or let the container download the file for you
docker run -dt --name valhalla_gis-ops -p 8002:8002 -v $PWD/custom_files:/custom_files -e tile_urls=https://download.geofabrik.de/europe/andorra-latest.osm.pbf ghcr.io/gis-ops/docker-valhalla/valhalla:latest
```

After that navigate to http://localhost:8002/ and you'll see the endpoint.

![](images/paste-1.png)

Let's calculate a single route in Andorra, between two well known places: Andorra la Vella and Pas de la Casa.

```{r}
andorra_la_vella = c(1.5218, 42.5075)
pas_de_la_casa = c(1.7333, 42.5425)
```

With reference to the [documentation](https://valhalla.github.io/valhalla/api/optimized/api-reference/) which states that it takes queries in the form of:

```
localhost:8002/optimized_route?json={}
```

With contents such as

```json
{"locations":[{"lat":40.042072,"lon":-76.306572},{"lat":39.992115,"lon":-76.781559},{"lat":39.984519,"lon":-76.6956},{"lat":39.996586,"lon":-76.769028},{"lat":39.984322,"lon":-76.706672}],"costing":"auto","directions_options":{"units":"miles"}}
```

We can construct a query URL as follows:

```{r}
url_raw = 'http://localhost:8002/optimized_route?json={"locations":[{"lon":1.5218,"lat":42.5075},{"lon":1.7333,"lat":42.5425}],"costing":"auto","directions_options":{"units":"miles"}}'
json = jsonlite::fromJSON(url_raw)
names(json)
names(json$trip)
names(json$trip$legs)
length(json$trip$legs$shape)
str(json)
```

We can convert the `$shape` column to a `sf` object and plot it.

```{r}
remotes::install_cran("googlePolylines")
remotes::install_cran("gepaf")
line = googlePolylines::decode(json$trip$legs$shape)
class(line)
length(line)
class(line[[1]])
line_sf = sfheaders::sf_linestring(line[[1]])
plot(line_sf)
```

```{r}
```

```{r}
```

```{r}
```

```{r}
```

```{r}
```

```{r}
```

```{r}
```

```{r}
```

```{r}
```

We can parse the 

```{r}
```

```{r}
```

```{r}
```